-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Assn (x, expr)              -> [state <- [x, evalExpr(state, expr)], world]
  | Seq (first, second)         -> eval(eval(c, first), second)
  | Skip                        -> c
  | Read (x)                    -> case readWorld (world) of [y, newWorld] -> [state <- [x, y], newWorld] esac
  | Write (expr)                -> [state, writeWorld(evalExpr(state, expr), world)]
  | If (cond, lbranch, rbranch) -> eval (c, if evalExpr (state, cond) then lbranch else rbranch fi)
  | While (cond, bdy)           -> while evalExpr (c [0], cond) do c := eval (c, bdy) od; c
  | DoWhile (bdy, cond)         -> do c := eval (c, bdy) while evalExpr (c [0], cond) od; c
  | _                           -> failure("Unreconginised statment in eval: %s", stmt.string)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
