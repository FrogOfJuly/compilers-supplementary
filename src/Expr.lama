-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of 
    Skip       -> [c, Bot]
  | Var (name) -> [c, st(name)]
  | Ref (name) -> [c, Ref (name)]
  | Const (v)  -> [c, v]
  | Ignore (expr)        -> case evalList (c, {expr})        of [c, _]                         -> [c, Bot]                                                           esac
  | Assn (r, rhs)        -> case evalList (c, {r, rhs})      of [[s, w], {Ref (name), rhs}]    -> [[s <- [name, rhs], w], rhs]                                       esac
  | Binop (op, lhs, rhs) -> case evalList (c, {lhs, rhs})    of [c, {lhs, rhs}]                -> [c, evalOp (op, lhs, rhs)]                                         esac
  | Seq (left, right)    -> case evalList (c, {left, right}) of [c, {_, v}]                    -> [c, v]                                                             esac
  | Read (r)             -> case eval     (c, r)             of [[s, w],  Ref (name)]          -> case w.readWorld of [v, w] -> [[st <- [name, v], w], Bot]     esac esac
  | Write (expr)         -> case eval     (c, expr)          of [[s, w], v]                    -> [[s, v.writeWorld(w)], Bot]                                        esac
  | If (cnd, th, el)     -> case eval     (c, cnd)           of [c, v]                         -> if v != 0 then c.eval (th) else c.eval (el) fi                     esac
  | While (cond, b)      -> case eval     (c, cond)          of [c, 0] -> [c, Bottom] | [c, _] -> case eval(c, b) of [c, _] -> eval(c, expr)                    esac esac
  | DoWhile (b, cond)    -> case eval     (c, b)             of [c, _] -> case eval(c, cond) of [c, 0] -> [c, Bot] | [c, _] -> eval(c, expr)                    esac esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
